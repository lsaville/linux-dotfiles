# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'

#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip#

# https://github.com/stephen-huan/dotfiles/blob/macos/.config/skhd%23%23os.Darwin/skhdrc
# primarily for yabai
# based around hyper (shift + ctrl + alt + cmd) as a mod key
# have to use karabiner tricks for mod + shift (double shift confuses skhd)

### applications

# open calendars
#hyper - c : kitty --single-instance ranger ~/Desktop/tjhsst/Calendars/

# open messenger
# hyper - g : open http://www.messenger.com

# caffeinate
#hyper - m : ~/Programs/bin/yabai/caffine

# f.lux
#0x41: ~/Programs/bin/yabai/flux

# authy-like 2fa code 
#hyper - g : kitty --single-instance /usr/local/bin/fish -c 'yubi_2fa' 

# zap
# hyper - 0x29 : ~/Programs/bin/yabai/zap

# animate desktop
# 0x5F: ~/Programs/bin/yabai/anime

# open terminal
# hyper - return : open -a Terminal --new
# hyper - return: open -a iTerm --new
#hyper - return: kitty --single-instance
#hyper - return: alacritty

# close all open terminals
# hyper - t : killall kitty

# open music player
#hyper - t : kitty --single-instance /usr/local/bin/fish -c "tmux attach -t cmus"

### yabai

# restart yabai
hyper - v : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"
#ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# i3 easter egg: shift + mod + e to logout
shift - 0x45 : skhd -k "cmd + shift - q"

#ctrl + alt + cmd - z : flameshot gui -c -p ~/Pictures/Screenshots 
hyper - z : flameshot gui -p ~/Pictures/Screenshots 

### windows

# focus window
hyper - h : yabai -m window --focus west
hyper - j : yabai -m window --focus south
hyper - k : yabai -m window --focus north
hyper - l : yabai -m window --focus east

# swap window
#0x4B : yabai -m window --swap west
#0x4C : yabai -m window --swap south
#0x43 : yabai -m window --swap north
#0x4E : yabai -m window --swap east

# move window
#cmd - 0x4B : yabai -m window --warp west
#cmd - 0x4C : yabai -m window --warp south
#cmd - 0x43 : yabai -m window --warp north
#cmd - 0x4E : yabai -m window --warp east

# set insertion point in focused container
#shift - 0x4B : yabai -m window --insert west
#shift - 0x4C : yabai -m window --insert south
#shift - 0x43 : yabai -m window --insert north
#shift - 0x4E : yabai -m window --insert east

# increase window size
#0x54 : yabai -m window --resize left:-20:0
#0x55 : yabai -m window --resize bottom:0:20
#0x56 : yabai -m window --resize top:0:-20
#0x57 : yabai -m window --resize right:20:0

# decrease window size
#cmd - 0x54 : yabai -m window --resize left:20:0
#cmd - 0x55 : yabai -m window --resize bottom:0:-20
#cmd - 0x56 : yabai -m window --resize top:0:20
#cmd - 0x57 : yabai -m window --resize right:-20:0

# toggle window border
#0x5E : yabai -m window --toggle border

# toggle window parent zoom
#hyper - p : yabai -m window --toggle zoom-parent

# toggle window fullscreen zoom
#0x5C : yabai -m window --toggle zoom-fullscreen
hyper - p : yabai -m window --toggle zoom-fullscreen

# toggle window native fullscreen
#cmd - 0x5C : yabai -m window --toggle native-fullscreen

# toggle window split type
hyper - e : yabai -m window --toggle split

# toggle sticky (show on all spaces)
# hyper - i : yabai -m window --toggle sticky

# toggle topmost (keep above other windows)
# alt - o : yabai -m window --toggle topmost

# toggle sticky, topmost and resize to picture-in-picture size
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --grid 5:5:4:0:1:1

### floating windows

# float / unfloat window and center on screen
hyper - u : yabai -m window --toggle float;\
            yabai -m window --grid 4:4:1:1:2:2

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen
# shift + alt - right  : yabai -m window --grid 1:2:1:0:1:1

# move window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20
# shift + ctrl - w : yabai -m window --move rel:0:-20
# shift + ctrl - d : yabai -m window --move rel:20:0

### spaces

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
#0x53 : yabai -m space --create && \
#       index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#       yabai -m window --space "${index}" && \
#       yabai -m space --focus "${index}"  
##### FISH SHELL SOLUTION
# 0x53 : yabai -m space --create && \
#        set index (yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index') && \
#        yabai -m window --space $index && \
#        yabai -m space --focus $index  

# create desktop and follow focus - uses jq for parsing json (brew install jq)
#cmd - 0x53 : yabai -m space --create && \
#       index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#       yabai -m space --focus "${index}"  
##### FISH SHELL SOLUTION
# cmd - 0x53 : yabai -m space --create && \
#        set index (yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index') && \
#        yabai -m space --focus $index  
                   
# destroy desktop
#cmd - 0x51 : yabai -m space --destroy

# fast focus desktop
#0x58 : yabai -m space --focus recent
#0x59 : yabai -m space --focus prev
#0x5B : yabai -m space --focus next
#f13  : yabai -m space --focus 1
#f14  : yabai -m space --focus 2
#f15  : yabai -m space --focus 3
#f16  : yabai -m space --focus 4
#f17  : yabai -m space --focus 5
#f18  : yabai -m space --focus 6
#f19  : yabai -m space --focus 7
# broken for some reason, have to use keycode as workaround
#0x5A : yabai -m space --focus 8
#0x52 : yabai -m space --focus 9

# send window to desktop and follow focus
#cmd - 0x58 : yabai -m window --space recent; yabai -m space --focus recent
#cmd - 0x59 : yabai -m window --space prev; yabai -m space --focus prev
#cmd - 0x5B : yabai -m window --space next; yabai -m space --focus next
#cmd - f13  : yabai -m window --space  1; yabai -m space --focus 1
#cmd - f14  : yabai -m window --space  2; yabai -m space --focus 2
#cmd - f15  : yabai -m window --space  3; yabai -m space --focus 3
#cmd - f16  : yabai -m window --space  4; yabai -m space --focus 4
#cmd - f17  : yabai -m window --space  5; yabai -m space --focus 5
#cmd - f18  : yabai -m window --space  6; yabai -m space --focus 6
#cmd - f19  : yabai -m window --space  7; yabai -m space --focus 7
#cmd - 0x5A : yabai -m window --space  8; yabai -m space --focus 8
#cmd - 0x52 : yabai -m window --space  9; yabai -m space --focus 9

# change layout of desktop
#cmd - 0x5E : yabai -m space --layout bsp
#cmd - 0x5D : yabai -m space --layout float

# balance size of windows
hyper - 0 : yabai -m space --balance

# rotate tree
hyper - r : yabai -m space --rotate 90

# mirror tree y-axis
hyper - y : yabai -m space --mirror y-axis

# mirror tree x-axis
hyper - x : yabai -m space --mirror x-axis

# toggle desktop offset
0x5D : yabai -m space --toggle padding; yabai -m space --toggle gap

### multiple monitors

# focus monitor
#shift - 0x58 : yabai -m display --focus recent
#shift - 0x59 : yabai -m display --focus prev
#shift - 0x5B : yabai -m display --focus next
#shift - f13  : yabai -m display --focus 1
#shift - f14  : yabai -m display --focus 2

# send window to monitor and follow focus
#shift + cmd - 0x58 : yabai -m window --display recent; yabai -m display --focus recent
#shift + cmd - 0x59 : yabai -m window --display prev; yabai -m display --focus prev
#shift + cmd - 0x5B : yabai -m window --display next; yabai -m display --focus next
#shift + cmd - f13  : yabai -m window --display 1; yabai -m display --focus 1
#shift + cmd - f14  : yabai -m window --display 2; yabai -m display --focus 2

